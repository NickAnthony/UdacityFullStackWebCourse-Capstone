{"version":3,"sources":["Constants.js","components/ActorRow.js","components/AppLoader.js","components/ActorColumn.js","components/Thumbnail.js","components/MovieColumn.js","components/Home.js","components/LoginButton.js","components/LogoutButton.js","components/AppHeader.js","components/NewActor.js","components/UserProfile.js","components/NonLinkThumbnail.js","components/AssociateActorWithMovie.js","components/EditActor.js","components/ActorProfile.js","components/EditMovie.js","components/AssociateMovieWithActor.js","components/MovieProfile.js","components/NewMovie.js","App.js","reportWebVitals.js","index.js"],"names":["DOMAIN","noMoviePlaceholder","noPortraitPlaceholder","ActorRow","props","actorProfileLink","actorId","to","style","textDecoration","className","src","imageSrc","alt","name","width","index","AppLoader","type","color","height","ActorColumn","state","actors","fetch","then","response","json","result","setState","undefined","this","length","map","actor","portrait_url","id","React","Component","Thumbnail","profileLink","title","MovieColumn","movies","filter","movie","Date","release_date","movie_photo","Home","LoginButton","loginWithRedirect","useAuth0","onClick","LogoutButton","logout","returnTo","window","location","origin","AppHeader","NewActor","isAuthenticated","getAccessTokenSilently","useState","portraitUrl","setPortraitUrl","portraitImgSrc","setPortraitImgSrc","setName","age","setAge","gender","setGender","redirect","setRedirect","postNewActor","a","audience","scope","accessToken","method","headers","body","JSON","stringify","success","console","log","message","onSubmit","event","preventDefault","value","onChange","e","target","UserProfile","errorMessage","user","isLoading","error","picture","email","confirmAlert","buttons","label","NonLinkThumbnail","selected","AssociateActorWithMovie","setMovies","fetchMovies","setFetchMovies","selectedMovies","setSelectedMovies","useEffect","selectedMoviesArray","forEach","includes","isSelectedMovie","some","selectedMovie","toggleAssociateActor","dismissPage","showDialog","commitActorAssociation","actorName","EditActor","commitEditAndDismiss","commitActorEdit","ActorProfile","useParams","setActor","fetchActor","setFetchActor","showAssociateMovieDialog","setAssociateMovieDiaglog","showEditActorDialog","setShowEditActorDialog","originalMovies","movieUpdateFailed","newName","newAge","newGender","newPortraitUrl","originalActor","editActorFailed","editFailed","EditMovie","setTitle","releaseDate","setReleaseDate","moviePhotoUrl","setMoviePhotoUrl","posterPhotoImgSrc","setPosterPhotoImgSrc","commitMovieEdit","AssociateMovieWithActor","setActors","fetchActors","setFetchActors","selectedActors","setSelectedActors","selectedActorsArray","movieId","isSelectedActor","selectedActor","movieTitle","MovieProfile","Moment","locale","setMovie","fetchMovie","setFetchMovie","showAssociateActorDialog","setAssociateActorDiaglog","showEditMovieDialog","setShowEditMovieDialog","originalActors","newTitle","newReleaseDate","newMoviePhoto","originalMovie","formattedNewReleaseDate","toString","format","editMovieFailed","NewMovie","photoImgSrc","setPhotoImgSrc","postNewMovie","formattedReleaseDate","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","domain","clientId","redirectUri","document","getElementById"],"mappings":"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","file":"static/js/main.286ba0c9.chunk.js","sourcesContent":["export const DOMAIN = 'https://nickanthony-casting-agency.herokuapp.com';\n// export const DOMAIN = 'http://127.0.0.1:5000';\nexport const noMoviePlaceholder = 'https://image.flaticon.com/icons/png/512/2790/2790961.png';\nexport const noPortraitPlaceholder = 'https://upload.wikimedia.org/wikipedia/en/b/b1/Portrait_placeholder.png';\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\n/**\n * Represents a single actor or actress.\n * Links out to that specific actor's or actress's page.\n * @component\n * @param {object} props - the props object.  Requires the following pieces:\n *     actorId - the database id of the actor/actress\n *     index - the index of this actor/actress row in the column\n *     imageSrc - the source of the actor/actress portrait/profile image\n *     name - the full name of the actor/actress\n * @return {Link} the formatted actor row as a link to the actor page\n */\nconst ActorRow = (props) => {\n  const actorProfileLink = `/actors/${props.actorId}`;\n  return (\n    <Link to={actorProfileLink} style={{textDecoration: 'none'}}>\n      <div className=\"Actor-row\" key={props.index}>\n        <img src={props.imageSrc} alt={props.name + ' Portait'} width=\"50\"/>\n        <div className=\"Actor-row-name\">\n          <div>{props.name}</div>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nActorRow.propTypes = {\n  actorId: PropTypes.number,\n  index: PropTypes.number,\n  imageSrc: PropTypes.string,\n  name: PropTypes.string,\n};\n\nexport default ActorRow;\n","import React from 'react';\nimport Loader from 'react-loader-spinner';\n\nconst AppLoader = () => {\n  return (\n    <div className=\"Loader-wrapper\">\n      <Loader type=\"Puff\" color=\"#4fc3f7\" height={100} width={100} />\n    </div>\n  );\n};\n\nexport default AppLoader;\n","import React from 'react';\nimport {DOMAIN, noPortraitPlaceholder} from '../Constants.js';\nimport ActorRow from './ActorRow';\nimport AppLoader from './AppLoader';\n\n/**\n * Represents a column of actors and actresses.\n * Fetches the /actors from the database then constructs an array of ActorRows.\n * @component\n */\nclass ActorColumn extends React.Component {\n  /**\n   * Constructs ActorColumn and sets initial state.\n   * @constructor\n   * @param {object} props -  the default props object\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      actors: [],\n    };\n  }\n  /**\n   * Runs when component mounts. Fetches the list of actors from the database.\n   */\n  componentDidMount() {\n    fetch(DOMAIN + '/actors')\n        .then((response) => response.json())\n        .then((result) => {\n          this.setState({actors: result.actors});\n        });\n  }\n  /**\n   * Returns the constructed components and html.\n   * If the RPC call has no yet returned, shows a loading icon.\n   * @return {object} the list of ActorRows for all actors.\n   */\n  render() {\n    if (this.state.actors === undefined || this.state.actors.length === 0) {\n      return (\n        <AppLoader />\n      );\n    }\n    return (\n      <div className=\"Actor-column\">\n        <h2 className=\"Actor-column-header\">Actors & Actresses</h2>\n        <h3 className=\"Column-header\">Available</h3>\n        {\n          this.state.actors.map((actor, index) => {\n            let imageSrc = noPortraitPlaceholder;\n            if (actor.portrait_url !== undefined) {\n              imageSrc = actor.portrait_url;\n            }\n            return <ActorRow\n              actorId={actor.id}\n              imageSrc={imageSrc}\n              key={index}\n              index={index}\n              name={actor.name}/>;\n          })\n        }\n        <h3 className=\"Column-header\">Unavabilable</h3>\n      </div>\n    );\n  }\n}\n\nexport default ActorColumn;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\n/**\n * Represents a linked Thumbnail.  On click, it will redirect to the given\n * resource type and it's id: `/type/id`.\n * @param {object} props - the props object.  Requires the following pieces:\n *     type - the resource type, either \"actor\" or \"movie\"\n *     id - the id of the resource\n *     index - the index of this thumbnail in the row/column\n *     imageSrc - the source of the image\n *     title - the text to be displayed below the image\n * @return {Component} NonLinkThumbnail component to represent a thumbnail.\n */\nconst Thumbnail = (props) => {\n  const profileLink = `/${props.type}/${props.id}`;\n  return (\n    <Link to={profileLink} style={{textDecoration: 'none'}}>\n      <div className=\"Thumbnail\" key={props.index}>\n        <img\n          src={props.imageSrc}\n          alt={props.title + ' Image'}\n          height=\"250\">\n        </img>\n        <div className=\"Thumbnail-text\">\n          <div>{props.title}</div>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nThumbnail.propTypes = {\n  type: PropTypes.string,\n  id: PropTypes.number,\n  index: PropTypes.number,\n  imageSrc: PropTypes.string,\n  title: PropTypes.string,\n};\n\nexport default Thumbnail;\n","import React from 'react';\nimport Thumbnail from './Thumbnail';\nimport {DOMAIN, noMoviePlaceholder} from '../Constants.js';\nimport AppLoader from './AppLoader';\n\n/**\n * Represents a column of actors and actresses.\n * Fetches the /actors from the database then constructs an array of Movie\n * Thumbnails.\n * @component\n */\nclass MovieColumn extends React.Component {\n  /**\n   * Constructs MovieColumn and sets initial state.\n   * @constructor\n   * @param {object} props -  the default props object\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      movies: [],\n    };\n  }\n  /**\n   * Runs when component mounts. Fetches the list of all movies from the\n   * database.\n   */\n  componentDidMount() {\n    fetch(DOMAIN + '/movies')\n        .then((response) => response.json())\n        .then((result) => {\n          this.setState({movies: result.movies});\n        });\n  }\n  /**\n   * Returns the constructed components and html.\n   * If the RPC call has no yet returned, shows a loading icon.\n   * @return {object} the list of Thumbnails for all actors.\n   */\n  render() {\n    if (this.state.movies === undefined || this.state.movies.length === 0) {\n      return (\n        <AppLoader />\n      );\n    }\n    return (\n      <div className=\"Movie-column-wrapper\">\n        <h2 className=\"Movie-column-header\">Movies</h2>\n        <h3 className=\"Column-header\">Upcoming</h3>\n        <div className=\"Movie-column\">\n          {\n            this.state.movies.filter((movie) => {\n              // Filter to with release dates today or in the future.\n              return (new Date() <= new Date(movie.release_date));\n            }).map((movie, index) => {\n              let imageSrc = noMoviePlaceholder;\n              if (movie.movie_photo !== undefined) {\n                imageSrc = movie.movie_photo;\n              }\n              return <Thumbnail\n                id={movie.id}\n                type=\"movies\"\n                index={index}\n                key={index}\n                imageSrc={imageSrc}\n                title={movie.title}/>;\n            })}\n        </div>\n        <h3 className=\"Column-header\">Released</h3>\n        <div className=\"Movie-column\">\n          {\n            this.state.movies.filter((movie) => {\n              // Filter to with release dates in the past.\n              return (new Date() > new Date(movie.release_date));\n            }).map((movie, index) => {\n              let imageSrc = noMoviePlaceholder;\n              if (movie.movie_photo !== undefined) {\n                imageSrc = movie.movie_photo;\n              }\n              return <Thumbnail\n                id={movie.id}\n                type=\"movies\"\n                index={index}\n                key={index}\n                imageSrc={imageSrc}\n                title={movie.title}/>;\n            })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MovieColumn;\n","import React from 'react';\nimport ActorColumn from './ActorColumn';\nimport MovieColumn from './MovieColumn';\n\n/**\n * Represent the home route at \"/\".\n * @return {Component} NewActor component to create new actors.\n */\nconst Home = () => {\n  return (\n    <div className=\"Body-wrapper\">\n      <div className=\"Column-wrapper\">\n        <ActorColumn/>\n        <MovieColumn/>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport {useAuth0} from '@auth0/auth0-react';\n\nconst LoginButton = () => {\n  const {loginWithRedirect} = useAuth0();\n\n  return (\n    <button\n      className=\"Button Menu-button\"\n      onClick={() => loginWithRedirect()}>\n      Log In\n    </button>\n  );\n};\n\nexport default LoginButton;\n","import React from 'react';\nimport {useAuth0} from '@auth0/auth0-react';\n\nconst LogoutButton = () => {\n  const {logout} = useAuth0();\n\n  return (\n    <button\n      className=\"Button Menu-button\"\n      onClick={() => logout({returnTo: window.location.origin})}>\n      Log Out\n    </button>\n  );\n};\n\nexport default LogoutButton;\n","import React from 'react';\nimport {Link, NavLink} from 'react-router-dom';\nimport LoginButton from './LoginButton';\nimport LogoutButton from './LogoutButton';\n\n/**\n * The header navigation bar of the application that sits at the top of the\n * page.\n * @component\n * @return {Component} the navigation bar.\n */\nconst AppHeader = () => {\n  return (\n    <div className=\"App-header\">\n      <NavLink to=\"/\" style={{textDecoration: 'none'}}>\n        <h2>CASTING AGENCY</h2>\n      </NavLink>\n      <div className=\"Menu\">\n        <Link to=\"/\" className=\"Button Menu-button\">Home</Link>\n        <Link to=\"/new-actor\" className=\"Button Menu-button\">Add Actor</Link>\n        <Link to=\"/new-movie\" className=\"Button Menu-button\">Add Movie</Link>\n        <Link to=\"/profile\" className=\"Button Menu-button\">Profile</Link>\n        <LoginButton />\n        <LogoutButton />\n      </div>\n    </div>\n  );\n};\n\nexport default AppHeader;\n","import React, {useState} from 'react';\nimport {useAuth0} from '@auth0/auth0-react';\nimport {Redirect} from 'react-router-dom';\nimport {DOMAIN, noPortraitPlaceholder} from '../Constants.js';\n\n/**\n * Represent the new actor route at \"/new-actor\".  This page lets you add an\n * actor or actress.\n * @return {Component} NewActor component to create new actors.\n */\nfunction NewActor() {\n  const {isAuthenticated, getAccessTokenSilently} = useAuth0();\n\n  // Set up state\n  const [portraitUrl, setPortraitUrl] = useState('');\n  const [portraitImgSrc, setPortraitImgSrc] = useState(noPortraitPlaceholder);\n  const [name, setName] = useState('');\n  const [age, setAge] = useState(0);\n  const [gender, setGender] = useState('');\n  const [redirect, setRedirect] = useState('');\n\n  const handleChange = (event) => {\n    setPortraitUrl(event.target.value);\n    if (event.target.value) {\n      setPortraitImgSrc(event.target.value);\n    } else {\n      setPortraitImgSrc(noPortraitPlaceholder);\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    postNewActor();\n  };\n\n  /**\n   * Takes the current input and posts the new actor to the database.\n   * Requires user to have logged in and have the correct ACLs.  New\n   * actors/actresses can only be posted by Executive Producers or Casting\n   * Agents.\n   */\n  const postNewActor = async () => {\n    try {\n      // TO-DO Make this occur on page load, not on submit\n      const accessToken = await getAccessTokenSilently({\n        audience: `casting-agency`,\n        scope: 'read:current_user',\n      });\n      // TO-DO Make this Async\n      fetch(DOMAIN + '/actors', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: name,\n          age: age,\n          gender: gender,\n          portrait_url: portraitUrl,\n        }),\n      })\n          .then((response) => response.json())\n          .then((result) => {\n            if (result.success) {\n              setRedirect(`/actors/${result.id}`);\n            }\n          });\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n\n  if (redirect) {\n    return <Redirect to={redirect} />;\n  }\n  if (!isAuthenticated) {\n    return (\n      <div className=\"New-item-wrapper\">\n        <h1>Please log in to add actors</h1>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"New-item-wrapper\">\n      <form className=\"New-item-form-wrapper\" onSubmit={handleSubmit}>\n        <h1>New Actor</h1>\n        <p className=\"Form-label\">Name</p>\n        <input\n          className=\"Form-input\"\n          type=\"text\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n        <p className=\"Form-label\">Age</p>\n        <input\n          className=\"Form-input\"\n          type=\"number\"\n          value={age}\n          onChange={(e) => setAge(e.target.value)}\n        />\n        <p className=\"Form-label\">Gender</p>\n        <input\n          className=\"Form-input\"\n          type=\"text\"\n          value={gender}\n          onChange={(e) => setGender(e.target.value)}\n        />\n        <p className=\"Form-label\">Portait Photo</p>\n        <input\n          className=\"Form-input\"\n          type=\"url\"\n          value={portraitUrl}\n          onChange={handleChange}/>\n          &nbsp;\n        <img\n          src={portraitImgSrc}\n          alt={`${name} Portait`}\n          width=\"100\"/>\n        {\n          !(portraitUrl) &&\n            <p className=\"Form-label\">Image will load with url</p>\n        }\n        <div className=\"Submit-button-wrapper\">\n          <input\n            type=\"submit\"\n            value=\"Submit\"\n            className=\"Button Submit-button\" />\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default NewActor;\n","import React from 'react';\nimport AppLoader from './AppLoader';\nimport {useAuth0} from '@auth0/auth0-react';\nimport {noPortraitPlaceholder} from '../Constants.js';\nimport {confirmAlert} from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\n/**\n * Represents a user profile of a user.  Uses Auth0 to log in and obtain the\n * users data.\n * @component\n * @return {Component} the actor/actress profile page\n */\nconst UserProfile = () => {\n  const {user, isAuthenticated, isLoading, error} = useAuth0();\n\n  const authFailed = (errorMessage) => {\n    confirmAlert({\n      title: 'Failed to authenticate.',\n      message: errorMessage,\n      buttons: [\n        {\n          label: 'Ok',\n          onClick: () => {},\n        },\n      ],\n    });\n  };\n\n  if (isLoading) {\n    return <AppLoader />;\n  }\n\n  if (!isAuthenticated) {\n    if (error) {\n      authFailed(error.message);\n    }\n    return (\n      <div className=\"User-profile\">\n        <img src={noPortraitPlaceholder} alt={'Portait'} width=\"100\"/>\n        <h2>Please log in.</h2>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"User-profile\">\n      <div className=\"User-profile-wrapper\">\n        <img src={user.picture} alt={user.name} height=\"150\"/>\n        <div className=\"User-profile-content\">\n          <h2>Name:</h2>\n          <h4>{user.name}</h4>\n          <h2>Email:</h2>\n          <h4>{user.email}</h4>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserProfile;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Represents a non-linked Thumbnail.  This means it won't redirect on click\n * so the on click functionality can be overriden.\n * Used as the select-deselect thumbnail in the associate components.\n * If props.selected == true, then it highlights as green.\n * @param {object} props - the props object.  Requires the following pieces:\n *     selected - true == highlight as green. false == no highlight.\n *     index - the index of this thumbnail in the row/column\n *     imageSrc - the source of the image\n *     title - the text to be displayed below the image\n * @return {Component} NonLinkThumbnail component to represent a thumbnail.\n */\nconst NonLinkThumbnail = (props) => {\n  if (props.selected) {\n    return (\n      <div className=\"Thumbnail-selected\" key={props.index}>\n        <img\n          src={props.imageSrc}\n          alt={props.title + ' Image'}\n          height=\"250\">\n        </img>\n        <div className=\"Thumbnail-text\">\n          <div>{props.title}</div>\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"Thumbnail\" key={props.index}>\n        <img\n          src={props.imageSrc}\n          alt={props.title + ' Image'}\n          height=\"250\">\n        </img>\n        <div className=\"Thumbnail-text\">\n          <div>{props.title}</div>\n        </div>\n      </div>\n    );\n  }\n};\n\nNonLinkThumbnail.propTypes = {\n  selected: PropTypes.bool,\n  index: PropTypes.number,\n  imageSrc: PropTypes.string,\n  title: PropTypes.string,\n};\n\nexport default NonLinkThumbnail;\n","import React, {useState, useEffect} from 'react';\nimport {DOMAIN, noMoviePlaceholder} from '../Constants.js';\nimport AppLoader from './AppLoader';\nimport NonLinkThumbnail from './NonLinkThumbnail';\nimport PropTypes from 'prop-types';\n\n/**\n * Represents a subcomponent that associates the actor with props.actorId with\n * movies selected on the page.\n * The selectedMovies state is the current set of selected movies.  It defaults\n * to the movies already associated with the actor/actress.  A user can then\n * select movies and deselect movies and the state will be updated.\n * When save is clicked, this component is taken down and the user is returned\n * back to the ActorProfile\n * @component\n * @param {object} props - the props object.  Requires the following pieces:\n *     actorId - the database id of the actor/actress\n *     actorName - the name of the actor/actress.\n *     showDialog - callback whether or not to show this component\n *     commitActorAssociation - callback to commit the new actor-to-move\n *                              associations to the database.\n * @return {Component} this component\n */\nfunction AssociateActorWithMovie(props) {\n  const [movies, setMovies] = useState([]);\n  const [fetchMovies, setFetchMovies] = useState(true);\n  const [selectedMovies, setSelectedMovies] = useState([]);\n\n  useEffect(() => {\n    if (fetchMovies) {\n      fetch(`${DOMAIN}/movies`)\n          .then((response) => response.json())\n          .then((result) => {\n            setMovies(result.movies);\n            // If we try to use selectedMovies directly, the state will\n            // overwrite itself -> Use a local array then do one state update.\n            let selectedMoviesArray = [];\n            result.movies.forEach((movie, index) => {\n              if (movie.actors.includes(props.actorId)) {\n                selectedMoviesArray = [...selectedMoviesArray, movie];\n              }\n            });\n            setSelectedMovies(selectedMoviesArray);\n          });\n      // Save original selected movies in case the fetch fails.\n      setFetchMovies(false);\n    }\n  }, [fetchMovies, movies, selectedMovies, props.actorId]);\n\n  /**\n   * @return {boolean} true if the given movie is in the set of selected\n   * movies.\n   * @param {object} movie - movie to check\n   */\n  const isSelectedMovie = (movie) => {\n    return selectedMovies.some(\n        (selectedMovie) => selectedMovie.id === movie.id,\n    );\n  };\n\n  /** Toggles association of the current actor/actress (props.actorId) with the\n   * movie selected.  Just updates the state and UI, not the database.\n   * @param {object} movie - movie that was just clicked\n   */\n  const toggleAssociateActor = async (movie) => {\n    if (isSelectedMovie(movie)) {\n      // Remove movie.\n      setSelectedMovies(selectedMovies.filter(\n          (selectedMovie) => selectedMovie.id !== movie.id));\n    } else {\n      // Add movie.\n      setSelectedMovies([...selectedMovies, movie]);\n    }\n  };\n\n  /** On the parent page, send the update to the server. */\n  const commitAssociationAndDismiss = () => {\n    props.commitActorAssociation(props.actorId, selectedMovies);\n    dismissPage();\n  };\n  const dismissPage = () => {\n    setFetchMovies(true);\n    // This callback dismisses this component and UI.\n    props.showDialog(false);\n  };\n\n  if (fetchMovies) {\n    return <AppLoader />;\n  }\n\n  return (\n    <div className=\"Profile-wrapper\">\n      <div className=\"Profile-body\">\n\n        <div className=\"Profile-menu-horizontal\">\n          <button className=\"Button Profile-menu-button-save\"\n            onClick={commitAssociationAndDismiss}>\n              Save\n          </button>\n          <button className=\"Button Profile-menu-button-cancel\"\n            onClick={dismissPage}>\n              Cancel\n          </button>\n        </div>\n\n        <h2>\n          Select all movies that {props.actorName} acted in or will act in.\n        </h2>\n\n        <div className=\"Movie-column-wrapper\">\n          <div className=\"Movie-column\">\n            {\n              movies.map((movie, index) => {\n                let imageSrc = noMoviePlaceholder;\n                if (movie.movie_photo !== undefined) {\n                  imageSrc = movie.movie_photo;\n                }\n                return (\n                  <div\n                    onClick={() => {\n                      toggleAssociateActor(movie);\n                    }}\n                    key={index}>\n                    <NonLinkThumbnail\n                      id={movie.id}\n                      index={index}\n                      imageSrc={imageSrc}\n                      title={movie.title}\n                      selected={isSelectedMovie(movie)}/>\n                  </div>\n                );\n              })}\n          </div>\n        </div>\n\n      </div>\n    </div>\n  );\n};\n\nAssociateActorWithMovie.propTypes = {\n  actorName: PropTypes.string,\n  actorId: PropTypes.number,\n  showDialog: PropTypes.func,\n  commitActorAssociation: PropTypes.func,\n};\n\nexport default AssociateActorWithMovie;\n","import React, {useState} from 'react';\nimport {noPortraitPlaceholder} from '../Constants.js';\nimport PropTypes from 'prop-types';\n\n/**\n * Represents the subcomponent that enables a use to edit details about an\n * actor.\n * The actor being edited is passed as props.actor.\n * Users can edit the Name, Age, Gender, or Portrait Photo.  To edit the movies\n * the actor is in, they need to go to the AssociateActorWithMovie page.\n * When save is clicked, this component is taken down and the user is returned\n * back to the ActorProfile, where the save will be committed to the database.\n * If the save cannot be completed, the UI resets to the original values.\n * @component\n * @param {object} props - the props object.  Requires the following pieces:\n *     actor - the actor being edited\n *     showDialog - callback whether or not to show this component\n *     commitActorEdit - callback to commit the new actor patches to the\n *                       database.\n * @return {Component} this component\n */\nfunction EditActor(props) {\n  // Set up state\n  const [portraitUrl, setPortraitUrl] = useState(props.actor.portrait_url);\n  const [portraitImgSrc, setPortraitImgSrc] = useState(\n      props.actor.portrait_url);\n  const [name, setName] = useState(props.actor.name);\n  const [age, setAge] = useState(props.actor.age);\n  const [gender, setGender] = useState(props.actor.gender);\n\n  /**\n   * Updates the portrait url to the value, or sets it to the default when no\n   * value is supplied.\n   * @param {object} event - the edit text event.\n   */\n  const handleChange = (event) => {\n    setPortraitUrl(event.target.value);\n    if (event.target.value) {\n      setPortraitImgSrc(event.target.value);\n    } else {\n      setPortraitImgSrc(noPortraitPlaceholder);\n    }\n  };\n\n  /** On the parent page, send the update to the server. */\n  const commitEditAndDismiss = () => {\n    props.commitActorEdit(name, age, gender, portraitUrl);\n    dismissPage();\n  };\n  /** Dismiss this component/UI and return to the parent component. */\n  const dismissPage = () => {\n    props.showDialog(false);\n  };\n\n  return (\n    <div className=\"Profile-wrapper\">\n      <div className=\"Profile-body\">\n\n        <form onSubmit={commitEditAndDismiss}>\n          <div className=\"Profile\">\n            <img\n              src={portraitImgSrc}\n              alt={`${name} Portait`}\n              className=\"Profile-photo\" />\n            <div className=\"Profile-content Profile-content-wide\">\n              <p className=\"Form-label\">Name</p>\n              <input\n                className=\"Form-input\"\n                type=\"text\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n              />\n              <p className=\"Form-label\">Age</p>\n              <input\n                className=\"Form-input\"\n                type=\"number\"\n                value={age}\n                onChange={(e) => setAge(e.target.value)}\n              />\n              <p className=\"Form-label\">Gender</p>\n              <input\n                className=\"Form-input\"\n                type=\"text\"\n                value={gender}\n                onChange={(e) => setGender(e.target.value)}\n              />\n              <p className=\"Form-label\">Portait Photo</p>\n              <input\n                className=\"Form-input\"\n                type=\"url\"\n                value={portraitUrl}\n                onChange={handleChange}/>\n            </div>\n          </div>\n        </form>\n        <div className=\"Profile-menu-horizontal\">\n          <button className=\"Button Profile-menu-button-save\"\n            onClick={commitEditAndDismiss}>\n            Save\n          </button>\n          <button className=\"Button Profile-menu-button-cancel\"\n            onClick={dismissPage}>\n            Cancel\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nEditActor.propTypes = {\n  actor: PropTypes.object,\n  commitActorEdit: PropTypes.func,\n  showDialog: PropTypes.func,\n};\n\nexport default EditActor;\n","import React, {useState, useEffect} from 'react';\nimport {useAuth0} from '@auth0/auth0-react';\nimport {\n  DOMAIN,\n  noPortraitPlaceholder,\n  noMoviePlaceholder,\n} from '../Constants.js';\nimport {useParams} from 'react-router-dom';\nimport AppLoader from './AppLoader';\nimport Thumbnail from './Thumbnail';\nimport AssociateActorWithMovie from './AssociateActorWithMovie';\nimport EditActor from './EditActor';\nimport {confirmAlert} from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\n\n/**\n * Represents a profile of an actor/actress.  This includes the name, gender,\n * age and the set of movies the actor is in.\n * Gets the id from the url, then fetches that actor/actress from the database,\n * along with all the movies.\n * Contains the callbacks and subcomponents edit this movie and save the edits\n * to the database.\n * When a user is signed in, they can then see the appropriate edit buttons.\n * @component\n * @return {Component} the actor/actress profile page\n */\nfunction ActorProfile() {\n  const {id} = useParams();\n  const {isAuthenticated, getAccessTokenSilently} = useAuth0();\n  const [actor, setActor] = useState(null);\n  const [movies, setMovies] = useState([]);\n  const [fetchActor, setFetchActor] = useState(true);\n  const [showAssociateMovieDialog, setAssociateMovieDiaglog] = useState(false);\n  const [showEditActorDialog, setShowEditActorDialog] = useState(false);\n\n  useEffect(() => {\n    if (fetchActor) {\n      fetch(`${DOMAIN}/actors/${id}/movies`)\n          .then((response) => response.json())\n          .then((result) => {\n            console.log(result);\n            if (result.actor.portrait_url === undefined) {\n              result.actor.portrait_url = noPortraitPlaceholder;\n            }\n            setActor(result.actor);\n            setMovies(result.movies);\n          });\n      setFetchActor(false);\n    }\n  }, [fetchActor, id]);\n\n  /** Commits the chosen actor-to-movie association to the database.\n   * @param {object} actorId - the id of the current actor being edited\n   * @param {object} selectedMovies - the set of movies selected in which the\n   *                                  actor/actress will act\n   */\n  const commitActorAssociation = async (actorId, selectedMovies) => {\n    // Save the current movie state in case the update fails.\n    const originalMovies = movies;\n\n    try {\n      const accessToken = await getAccessTokenSilently({\n        audience: `casting-agency`,\n        scope: 'read:current_user',\n      });\n      // Opportunistically use the setMovies to set the movies.\n      setMovies(selectedMovies);\n      // TO-DO Make this Async\n      fetch(`${DOMAIN}/actors/${actorId}`, {\n        method: 'PATCH',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          movies: selectedMovies.map((movie) => movie.id),\n        }),\n      })\n          .then((response) => response.json())\n          .then((result) => {\n            if (result.success) {\n              console.log(result);\n            } else {\n              movieUpdateFailed(result.message, originalMovies);\n            }\n          });\n    } catch (e) {\n      console.log(e.message);\n      movieUpdateFailed(e.message, originalMovies);\n    }\n  };\n\n  /**\n   * Takes the current input and posts the patch to the database.\n   * Opportunistically makes the edit, then rollbacks if it fails for some\n   * reason.  Executive Producers and Casting Agents can make patch edits.\n   * @param {object} newName - the new name of the actor/actress\n   * @param {number} newAge - the new age of the actor/actress\n   * @param {number} newGender - the new gender of the actor/actress\n   * @param {object} newPortraitUrl - the new portrait photo of the\n   *                                  actor/actress\n   * Note that these params will be default set to the existing values.\n   */\n  const commitActorEdit = async (\n      newName, newAge, newGender, newPortraitUrl,\n  ) => {\n    // Save the current state in case the update fails.\n    const originalActor = actor;\n\n    try {\n      const accessToken = await getAccessTokenSilently({\n        audience: `casting-agency`,\n        scope: 'read:current_user',\n      });\n      // Opportunistically set the new info.\n      setActor({\n        name: newName,\n        age: newAge,\n        gender: newGender,\n        portrait_url: newPortraitUrl,\n        movies: actor.movies,\n      });\n      // TO-DO Make this Async\n      fetch(`${DOMAIN}/actors/${id}`, {\n        method: 'PATCH',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: newName,\n          age: newAge,\n          gender: newGender,\n          portrait_url: newPortraitUrl,\n        }),\n      })\n          .then((response) => response.json())\n          .then((result) => {\n            if (result.success) {\n              console.log(result);\n            } else {\n              editActorFailed(result.message, originalActor);\n            }\n          });\n    } catch (e) {\n      console.log(e.message);\n      editActorFailed(e.message, originalActor);\n    }\n  };\n\n  const editActorFailed = (errorMessage, originalActor) => {\n    setActor(originalActor);\n    editFailed(errorMessage);\n  };\n\n  const movieUpdateFailed = (errorMessage, originalMovies) => {\n    setMovies(originalMovies);\n    editFailed(errorMessage);\n  };\n\n  const editFailed = (errorMessage) => {\n    confirmAlert({\n      title: 'Failed to save changes!',\n      message: errorMessage,\n      buttons: [\n        {\n          label: 'Ok',\n          onClick: () => {},\n        },\n      ],\n    });\n  };\n\n  if (!actor) {\n    return <AppLoader />;\n  }\n\n  if (showEditActorDialog) {\n    return <EditActor\n      actor={actor}\n      showDialog={setShowEditActorDialog}\n      commitActorEdit={commitActorEdit}/>;\n  }\n\n  if (showAssociateMovieDialog) {\n    return <AssociateActorWithMovie\n      actorName={actor.name}\n      actorId={actor.id}\n      showDialog={setAssociateMovieDiaglog}\n      commitActorAssociation={commitActorAssociation}/>;\n  }\n\n  return (\n    <div className='Profile-wrapper'>\n      <div className='Profile-body'>\n\n        <div className='Profile'>\n          <img\n            src={actor.portrait_url}\n            alt={actor.name + ' Portrait'}\n            className='Profile-photo' />\n          <div className='Profile-content'>\n            <p className='Profile-name'>{actor.name}</p>\n            <h2>{actor.gender}, {actor.age}</h2>\n            {\n              (isAuthenticated) &&\n                  <div className='Profile-menu'>\n                    <button\n                      className='Button Profile-menu-button'\n                      onClick={() => setAssociateMovieDiaglog(true)}>\n                      Update movies\n                    </button>\n                    <button\n                      className='Button Profile-menu-button'\n                      onClick={() => setShowEditActorDialog(true)}>\n                      Edit\n                    </button>\n                    { /* TODO Implement: Delete */ }\n                    <button\n                      className='Button Profile-menu-button-delete'\n                      onClick={() => {}}>\n                      Delete actor\n                    </button>\n                  </div>\n            }\n            {\n              (!isAuthenticated) &&\n                  <div className='Profile-menu'>\n                    <h4>\n                        Only Casting Directors or Executive Producers can make\n                        changes. <br/> Please log in to edit.\n                    </h4>\n                  </div>\n            }\n          </div>\n        </div>\n\n        <div className='Movie-column-wrapper'>\n          <h3 className='Column-header'>Upcoming</h3>\n          <div className='Movie-column'>\n            {\n              movies.filter((movie) => {\n                // Filter to with release dates today or in the future.\n                return (new Date() <= new Date(movie.release_date));\n              }).map((movie, index) => {\n                let imageSrc = noMoviePlaceholder;\n                if (movie.movie_photo !== undefined) {\n                  imageSrc = movie.movie_photo;\n                }\n                return <Thumbnail\n                  id={movie.id}\n                  type='movies'\n                  index={index}\n                  key={index}\n                  imageSrc={imageSrc}\n                  title={movie.title}/>;\n              })}\n          </div>\n          <h3 className='Column-header'>Released</h3>\n          <div className='Movie-column'>\n            {\n              movies.filter((movie) => {\n                // Filter to with release dates in the past.\n                return (new Date() > new Date(movie.release_date));\n              }).map((movie, index) => {\n                let imageSrc = noMoviePlaceholder;\n                if (movie.movie_photo !== undefined) {\n                  imageSrc = movie.movie_photo;\n                }\n                return <Thumbnail\n                  id={movie.id}\n                  type='movies'\n                  index={index}\n                  key={index}\n                  imageSrc={imageSrc}\n                  title={movie.title}/>;\n              })}\n          </div>\n        </div>\n\n      </div>\n    </div>\n  );\n};\n\nexport default ActorProfile;\n","import React, {useState} from 'react';\nimport {noMoviePlaceholder} from '../Constants.js';\nimport DatePicker from 'react-date-picker';\nimport PropTypes from 'prop-types';\n\n/**\n * Represents the subcomponent that enables a use to edit details about a\n * movie.\n * The movie being edited is passed as props.movie.\n * Users can edit the Title, Release Date, or Poster Movie Photo.  To edit the\n * the actors in the movie, users need to to go to the AssociateMovieWithActor\n * dialog.\n * When save is clicked, this component is taken down and the user is returned\n * back to the MovieProfile, where the save will be committed to the database.\n * If the save cannot be completed, the UI resets to the original values.\n * @component\n * @param {object} props - the props object.  Requires the following pieces:\n *     movie - the movie being edited\n *     showDialog - callback whether or not to show this component\n *     commitActorEdit - callback to commit the new actor patches to the\n *                       database.\n * @return {Component} this component\n */\nfunction EditMovie(props) {\n  // Set up state\n  const [title, setTitle] = useState(props.movie.title);\n  const [releaseDate, setReleaseDate] = useState(\n      new Date(props.movie.release_date));\n  const [moviePhotoUrl, setMoviePhotoUrl] = useState(\n      props.movie.movie_photo);\n  const [posterPhotoImgSrc, setPosterPhotoImgSrc] = useState(\n      props.movie.movie_photo);\n\n  /**\n   * Updates the movie poster photo url to the value, or sets it to the default\n   * when no value is supplied.\n   * @param {object} event - the edit text event.\n   */\n  const handleChange = (event) => {\n    setMoviePhotoUrl(event.target.value);\n    if (event.target.value) {\n      setPosterPhotoImgSrc(event.target.value);\n    } else {\n      setPosterPhotoImgSrc(noMoviePlaceholder);\n    }\n  };\n\n  /** On the parent page, send the update to the server. */\n  const commitEditAndDismiss = () => {\n    props.commitMovieEdit(title, releaseDate, moviePhotoUrl);\n    dismissPage();\n  };\n  /** Dismiss this component/UI and return to the parent component. */\n  const dismissPage = () => {\n    props.showDialog(false);\n  };\n\n  return (\n    <div className=\"Profile-wrapper\">\n      <div className=\"Profile-body\">\n\n        <form onSubmit={commitEditAndDismiss}>\n          <div className=\"Profile\">\n            <img\n              src={posterPhotoImgSrc}\n              alt={`${title} Poster`}\n              className=\"Profile-photo\" />\n            <div className=\"Profile-content Profile-content-wide\">\n              <p className=\"Form-label\">Title</p>\n              <input\n                className=\"Form-input\"\n                type=\"text\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n              />\n              <p className=\"Form-label\">Release date</p>\n              <DatePicker\n                onChange={setReleaseDate}\n                value={releaseDate}\n              />\n              <p className=\"Form-label\">Movie Photo</p>\n              <input\n                className=\"Form-input\"\n                type=\"url\"\n                value={posterPhotoImgSrc}\n                onChange={handleChange}/>\n            </div>\n          </div>\n        </form>\n        <div className=\"Profile-menu-horizontal\">\n          <button className=\"Button Profile-menu-button-save\"\n            onClick={commitEditAndDismiss}>\n            Save\n          </button>\n          <button className=\"Button Profile-menu-button-cancel\"\n            onClick={dismissPage}>\n            Cancel\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nEditMovie.propTypes = {\n  movie: PropTypes.object,\n  commitMovieEdit: PropTypes.func,\n  showDialog: PropTypes.func,\n};\n\nexport default EditMovie;\n","import React, {useState, useEffect} from 'react';\nimport {DOMAIN, noPortraitPlaceholder} from '../Constants.js';\nimport AppLoader from './AppLoader';\nimport NonLinkThumbnail from './NonLinkThumbnail';\nimport PropTypes from 'prop-types';\n\n/**\n * Represents a subcomponent that associates the movie with props.movieId with\n * actors selected on the page.\n * The selectedActors state is the current set of selected actors.  It defaults\n * to the actors already associated with the movie.  A user can then\n * select actors/actresses and deselect actors/actresses and the state will be\n * updated.\n * When save is clicked, this component is taken down and the user is returned\n * back to the MovieProfile\n * @component\n * @param {object} props - the props object.  Requires the following pieces:\n *     movieId - the database id of the movie\n *     movieTitle - the title of the movie\n *     showDialog - callback whether or not to show this component\n *     commitActorAssociation - callback to commit the new actor-to-movie\n *                              associations to the database.\n * @return {Component} this component\n */\nfunction AssociateMovieWithActor(props) {\n  const [actors, setActors] = useState([]);\n  const [fetchActors, setFetchActors] = useState(true);\n  const [selectedActors, setSelectedActors] = useState([]);\n\n  useEffect(() => {\n    if (fetchActors) {\n      fetch(`${DOMAIN}/actors`)\n          .then((response) => response.json())\n          .then((result) => {\n            setActors(result.actors);\n            // If we try to use selectedActors directly, the state will\n            // overwrite itself -> Use a local array then do one state update.\n            let selectedActorsArray = [];\n            result.actors.forEach((actor, index) => {\n              if (actor.movies.includes(props.movieId)) {\n                selectedActorsArray = [...selectedActorsArray, actor];\n              }\n            });\n            setSelectedActors(selectedActorsArray);\n          });\n      // Save original selected actors in case the fetch fails.\n      setFetchActors(false);\n    }\n  }, [fetchActors, actors, selectedActors, props.movieId]);\n\n  /* Returns true if the given actor is in the set of selected actors.\n   */\n  const isSelectedActor = (actor) => {\n    return selectedActors.some(\n        (selectedActor) => selectedActor.id === actor.id,\n    );\n  };\n\n  /* Toggles association of the current movie (props.movieId) with the\n   * actor selected.  Just updates the state and UI, not the database.\n   */\n  const toggleAssociateActor = async (actor) => {\n    if (isSelectedActor(actor)) {\n      // Remove actor.\n      setSelectedActors(selectedActors.filter(\n          (selectedActor) => selectedActor.id !== actor.id));\n    } else {\n      // Add actor.\n      setSelectedActors([...selectedActors, actor]);\n    }\n  };\n\n  /* On the parent page, send the update to the server. */\n  const commitAssociationAndDismiss = () => {\n    props.commitActorAssociation(props.movieId, selectedActors);\n    dismissPage();\n  };\n  const dismissPage = () => {\n    setFetchActors(true);\n    // This callback dismisses this component and UI.\n    props.showDialog(false);\n  };\n\n  if (fetchActors) {\n    return <AppLoader />;\n  }\n\n  return (\n    <div className=\"Profile-wrapper\">\n      <div className=\"Profile-body\">\n\n        <div className=\"Profile-menu-horizontal\">\n          <button className=\"Button Profile-menu-button-save\"\n            onClick={commitAssociationAndDismiss}>\n              Save\n          </button>\n          <button className=\"Button Profile-menu-button-cancel\"\n            onClick={dismissPage}>\n              Cancel\n          </button>\n        </div>\n\n        <h2>\n          Select all actors/actresses that acted in or will act\n          in {props.movieTitle}.\n        </h2>\n\n        <div className=\"Movie-column-wrapper\">\n          <div className=\"Movie-column\">\n            {\n              actors.map((actor, index) => {\n                let imageSrc = noPortraitPlaceholder;\n                if (actor.portrait_url !== undefined) {\n                  imageSrc = actor.portrait_url;\n                }\n                return (\n                  <div\n                    onClick={() => {\n                      toggleAssociateActor(actor);\n                    }}\n                    key={index}>\n                    <NonLinkThumbnail\n                      id={actor.id}\n                      index={index}\n                      key={index}\n                      imageSrc={imageSrc}\n                      title={actor.name}\n                      selected={isSelectedActor(actor)}/>\n                  </div>\n                );\n              })}\n          </div>\n        </div>\n\n      </div>\n    </div>\n  );\n};\n\nAssociateMovieWithActor.propTypes = {\n  movieTitle: PropTypes.string,\n  movieId: PropTypes.number,\n  showDialog: PropTypes.func,\n  commitActorAssociation: PropTypes.func,\n};\n\nexport default AssociateMovieWithActor;\n","import React, {useState, useEffect} from 'react';\nimport {useAuth0} from '@auth0/auth0-react';\nimport {\n  DOMAIN,\n  noPortraitPlaceholder,\n  noMoviePlaceholder,\n} from '../Constants.js';\nimport {useParams} from 'react-router-dom';\nimport AppLoader from './AppLoader';\nimport Thumbnail from './Thumbnail';\nimport EditMovie from './EditMovie';\nimport AssociateMovieWithActor from './AssociateMovieWithActor';\nimport Moment from 'moment';\nimport {confirmAlert} from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\n\n/**\n * Represents a profile of a movie.  This includes the title, release date,\n * and the set of actors/actress in the movie.\n * Gets the id from the url, then fetches that movie from the database, along\n * with all the actors.\n * Contains the callbacks and subcomponents edit this movie and save the edits\n * to the database.\n * When a user is signed in, they can then see the appropriate edit buttons.\n * @component\n * @return {Component} the movie profile page\n */\nfunction MovieProfile() {\n  // Get id from the url\n  const {id} = useParams();\n  const {isAuthenticated, getAccessTokenSilently} = useAuth0();\n  Moment.locale('en');\n\n  // Set up state\n  const [movie, setMovie] = useState(null);\n  const [actors, setActors] = useState([]);\n  const [fetchMovie, setFetchMovie] = useState(false);\n  const [showAssociateActorDialog, setAssociateActorDiaglog] = useState(false);\n  const [showEditMovieDialog, setShowEditMovieDialog] = useState(false);\n\n  useEffect(() => {\n    if (!fetchMovie) {\n      fetch(`${DOMAIN}/movies/${id}/actors`)\n          .then((response) => response.json())\n          .then((result) => {\n            console.log(result);\n            if (result.movie.movie_photo === undefined) {\n              result.movie.movie_photo = noMoviePlaceholder;\n            }\n            setMovie(result.movie);\n            setActors(result.actors);\n          });\n      setFetchMovie(true);\n    }\n  }, [fetchMovie, id]);\n\n\n  /** Commits the chosen actor-to-movie association to the database.\n   * @param {object} movieId - the id of the current movie being edited\n   * @param {object} selectedActors - the set of actors selected to be in the\n   *                                  movie.\n   */\n  const commitActorAssociation = async (movieId, selectedActors) => {\n    // Save the current movie state in case the update fails.\n    const originalActors = actors;\n\n    try {\n      const accessToken = await getAccessTokenSilently({\n        audience: `casting-agency`,\n        scope: 'read:current_user',\n      });\n      // Opportunistically use the setActors to set the movies.\n      setActors(selectedActors);\n      fetch(`${DOMAIN}/movies/${movieId}`, {\n        method: 'PATCH',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          actors: selectedActors.map((actor) => actor.id),\n        }),\n      })\n          .then((response) => response.json())\n          .then((result) => {\n            if (result.success) {\n              console.log(result);\n            } else {\n              movieUpdateFailed(result.message, originalActors);\n            }\n          });\n    } catch (e) {\n      console.log(e.message);\n      movieUpdateFailed(e.message, originalActors);\n    }\n  };\n\n  /**\n   * Takes the current input and posts the patch to the database.\n   * Opportunistically makes the edit, then rollbacks if it fails for some\n   * reason.  Only Executive Producers can patch edits.\n   * @param {string} newTitle - the new title of the movie\n   * @param {Date} newReleaseDate - the new release date of the movie\n   * @param {string} newMoviePhoto - the new poster photo of the movie\n   * Note that these params will be default set to the existing values.\n   */\n  const commitMovieEdit = async (newTitle, newReleaseDate, newMoviePhoto) => {\n    // Save the current state in case the update fails.\n    const originalMovie = movie;\n\n    try {\n      const accessToken = await getAccessTokenSilently({\n        audience: `casting-agency`,\n        scope: 'read:current_user',\n      });\n      // Opportunistically set the new info.\n      // Use Moment to format the release date.\n      // eslint-disable-next-line new-cap\n      const formattedNewReleaseDate = Moment(\n          newReleaseDate.toString(),\n      ).format('YYYY-MM-DD');\n      setMovie({\n        title: newTitle,\n        release_date: formattedNewReleaseDate,\n        movie_photo: newMoviePhoto,\n        actors: movie.actors,\n      });\n      // TO-DO Make this Async\n      fetch(`${DOMAIN}/movies/${id}`, {\n        method: 'PATCH',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          title: newTitle,\n          release_date: formattedNewReleaseDate,\n          movie_photo: newMoviePhoto,\n        }),\n      })\n          .then((response) => response.json())\n          .then((result) => {\n            if (result.success) {\n              console.log(result);\n            } else {\n              editMovieFailed(result.message, originalMovie);\n            }\n          });\n    } catch (e) {\n      console.log(e.message);\n      editMovieFailed(e.message, originalMovie);\n    }\n  };\n\n  const editMovieFailed = (errorMessage, originalMovie) => {\n    setMovie(originalMovie);\n    editFailed(errorMessage);\n  };\n\n  const movieUpdateFailed = (errorMessage, originalActors) => {\n    setActors(originalActors);\n    editFailed(errorMessage);\n  };\n\n  const editFailed = (errorMessage) => {\n    confirmAlert({\n      title: 'Failed to save changes!',\n      message: errorMessage,\n      buttons: [\n        {\n          label: 'Ok',\n          onClick: () => {},\n        },\n      ],\n    });\n  };\n\n  if (!movie) {\n    return <AppLoader />;\n  }\n\n  if (showEditMovieDialog) {\n    return <EditMovie\n      movie={movie}\n      showDialog={setShowEditMovieDialog}\n      commitMovieEdit={commitMovieEdit}/>;\n  }\n\n  if (showAssociateActorDialog) {\n    return <AssociateMovieWithActor\n      movieTitle={movie.title}\n      movieId={movie.id}\n      showDialog={setAssociateActorDiaglog}\n      commitActorAssociation={commitActorAssociation}/>;\n  }\n\n  return (\n    <div className=\"Profile-wrapper\">\n      <div className=\"Profile-body\">\n\n        <div className=\"Profile\">\n          <img\n            src={movie.movie_photo}\n            alt={movie.title + ' Poster Photo'}\n            className=\"Profile-photo\" />\n          <div className=\"Profile-content\">\n            <p className=\"Profile-name\">{movie.title}</p>\n            <div>\n              <h3>Release date:</h3>\n              <h2>{\n                // eslint-disable-next-line new-cap\n                Moment(movie.release_date).format('MMMM Do, YYYY')\n              }</h2>\n            </div>\n            {\n              (isAuthenticated) &&\n                  <div className=\"Profile-menu\">\n                    <button\n                      className=\"Button Profile-menu-button\"\n                      onClick={() => setAssociateActorDiaglog(true)}>\n                      Cast actors/actresses\n                    </button>\n                    <button\n                      className=\"Button Profile-menu-button\"\n                      onClick={() => setShowEditMovieDialog(true)}>\n                      Edit\n                    </button>\n                    { /* TODO Implement: Delete */ }\n                    <button\n                      className=\"Button Profile-menu-button-delete\"\n                      onClick={() => {}}>\n                      Delete\n                    </button>\n                  </div>\n            }\n            {\n              (!isAuthenticated) &&\n                  <div className=\"Profile-menu\">\n                    <h4>\n                        Only Casting Directors or Executive Producers can make\n                        changes. <br/> Please log in to edit.\n                    </h4>\n                  </div>\n            }\n          </div>\n        </div>\n\n        <div className=\"Movie-column-wrapper\">\n          <h3 className=\"Column-header\">Actors/Actresses</h3>\n          <div className=\"Movie-column\">\n            {\n              actors.map((actor, index) => {\n                let imageSrc = noPortraitPlaceholder;\n                if (actor.portrait_url !== undefined) {\n                  imageSrc = actor.portrait_url;\n                }\n                return <Thumbnail\n                  id={actor.id}\n                  type=\"actors\"\n                  index={index}\n                  key={index}\n                  imageSrc={imageSrc}\n                  title={actor.name}/>;\n              })}\n          </div>\n        </div>\n\n      </div>\n    </div>\n  );\n};\n\nexport default MovieProfile;\n","import React, {useState} from 'react';\nimport {useAuth0} from '@auth0/auth0-react';\nimport DatePicker from 'react-date-picker';\nimport {Redirect} from 'react-router-dom';\nimport {DOMAIN, noMoviePlaceholder} from '../Constants.js';\nimport Moment from 'moment';\n\n/**\n * Represent the new movie route at \"/new-movie\".  This page lets you add an\n * movie.\n  * @return {Component} NewMovie component to create new movies.\n */\nfunction NewMovie() {\n  const {isAuthenticated, getAccessTokenSilently} = useAuth0();\n  Moment.locale('en');\n\n  // Set up state\n  const [moviePhotoUrl, setMoviePhotoUrl] = useState(null);\n  const [photoImgSrc, setPhotoImgSrc] = useState(noMoviePlaceholder);\n  const [title, setTitle] = useState('');\n  const [releaseDate, setReleaseDate] = useState(new Date());\n  const [redirect, setRedirect] = useState('');\n\n  const handleChange = (event) => {\n    setMoviePhotoUrl(event.target.value);\n    if (event.target.value) {\n      setPhotoImgSrc(event.target.value);\n    } else {\n      setPhotoImgSrc(noMoviePlaceholder);\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    postNewMovie();\n  };\n  /**\n   * Takes the current input and posts the movie to the database.\n   * Requires user to have logged in and have the correct ACLs.  New movies can\n   * only be posted by Executive Producers.\n   */\n  const postNewMovie = async () => {\n    try {\n      // TODO: Make this occur on page load, not on submit\n      const accessToken = await getAccessTokenSilently({\n        audience: `casting-agency`,\n        scope: 'read:current_user',\n      });\n      // eslint-disable-next-line new-cap\n      const formattedReleaseDate = Moment(\n          releaseDate.toString(),\n      ).format('YYYY-MM-DD');\n      console.log(JSON.stringify({\n        title: title,\n        release_date: formattedReleaseDate,\n        movie_photo: moviePhotoUrl,\n      }));\n      // TO-DO Make this Async\n      fetch(DOMAIN + '/movies', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          title: title,\n          release_date: formattedReleaseDate,\n          movie_photo: moviePhotoUrl,\n        }),\n      })\n          .then((response) => response.json())\n          .then((result) => {\n            console.log(result);\n            if (result.success) {\n              setRedirect(`/movies/${result.id}`);\n            }\n          });\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n\n  if (redirect) {\n    return <Redirect to={redirect} />;\n  }\n  if (!isAuthenticated) {\n    return (\n      <div className=\"New-item-wrapper\">\n        <form className=\"New-item-form-wrapper\">\n          <h1>New Movie</h1>\n          <h2>Only Executive Producers can add movies.  Please log in to\n              continue.\n          </h2>\n        </form>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"New-item-wrapper\">\n      <form className=\"New-item-form-wrapper\" onSubmit={handleSubmit}>\n        <h1>New Movie</h1>\n        <p className=\"Form-label\">Title</p>\n        <input\n          className=\"Form-input\"\n          type=\"text\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n        <p className=\"Form-label\">Release date</p>\n        <DatePicker\n          onChange={setReleaseDate}\n          value={releaseDate}\n        />\n        <p className=\"Form-label\">Movie Poster Photo</p>\n        <input\n          className=\"Form-input\"\n          type=\"url\"\n          value={moviePhotoUrl}\n          onChange={handleChange}/>\n          &nbsp;\n        <img\n          src={photoImgSrc}\n          alt={`${title} Poster`}\n          width=\"100\"/>\n        {\n          !(moviePhotoUrl) &&\n            <p className=\"Form-label\">Image will load with url</p>\n        }\n        <div className=\"Submit-button-wrapper\">\n          <input\n            type=\"submit\"\n            value=\"Submit\"\n            className=\"Button Submit-button\"/>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default NewMovie;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport './App.css';\n/* Import CSS for react-loader-spinner */\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport Home from './components/Home';\nimport AppHeader from './components/AppHeader';\nimport NewActor from './components/NewActor';\nimport UserProfile from './components/UserProfile';\nimport ActorProfile from './components/ActorProfile';\nimport MovieProfile from './components/MovieProfile';\nimport NewMovie from './components/NewMovie';\n\n/**\n * The base App wrapper.\n * Contains the Routes and Navigation for the whole app.\n * @constructor\n * @component\n */\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <AppHeader />\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/new-actor\">\n            <NewActor />\n          </Route>\n          <Route path=\"/new-movie\">\n            <NewMovie />\n          </Route>\n          <Route path=\"/profile\">\n            <UserProfile />\n          </Route>\n          <Route path=\"/actors/:id\">\n            <ActorProfile />\n          </Route>\n          <Route path=\"/movies/:id\">\n            <MovieProfile />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport './styles/DatePicker.css';\nimport './styles/Calendar.css';\nimport App from './App';\nimport {Auth0Provider} from '@auth0/auth0-react';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n      <Auth0Provider\n        domain=\"fsnd-app-nickanthony.us.auth0.com\"\n        clientId=\"ExP2mxHo4wAMYB0MGc9nmWHxSHcfO1eu\"\n        redirectUri={window.location.origin}\n        audience=\"casting-agency\"\n        scope=\"read:current_user update:current_user_metadata\"\n      >\n        <App />\n      </Auth0Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}